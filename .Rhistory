setwd("C:/Users/Bénédicte/Documents/Dataiku")
source("Scripts/data.R")
source("Scripts/separ1.R")
library(tree)
training <- read.csv("Data/census_income_learn.csv", header=F)
colnames(training) <- c("AAGE","ACLSWKR","ADTIND","ADTOCC", "AHGA",
"AHRSPAY", "AHSCOL", "AMARITL", "AMJIND",
"AMJOCC", "ARACE", "AREORGN", "ASEX", "AUNMEM",
"AUNTYPE", "AWKSTAT", "CAPGAIN", "CAPLOSS", "DIVVAL",
"FILESTAT", "GRINREG", "GRINST", "HHDFMX",
"HHDREL", "MARSUPWT", "MIGMTR1", "MIGMTR3", "MIGMTR4",
"MIGSAME", "MIGSUN","NOEMP", "PARENT",
"PEFNTVTY","PEMNTVTY","PENATVTY","PRCITSHP",
"SEOTR", "VETQVA", "VETYN", "WKSWORK","YEAR", "INCOME")
# The attribute "instance weight" should *not* be used in the
# classifiers, so it is set to "ignore" in this file
training <- subset(training, select=-c(MARSUPWT))
training <- data.modificationOfCountryOfBirth(training)
training <- subset(training, select=-c(GRINST,HHDFMX))
training <- subset(training, select=-c(ADTIND,ADTOCC))
control_tree <- tree.control(nobs=dim(training[,1:36])[1],mindev = 0.0001) # entire tree
tr <- tree(as.factor(z) ~ ., data.frame(training[,1:36]), control = control_tree) # zapp has to be factor
validation <- cv.tree(tr, FUN = prune.misclass)
test <- read.csv("Data/census_income_test.csv", header=F)
colnames(test) <- c("AAGE","ACLSWKR","ADTIND","ADTOCC", "AHGA",
"AHRSPAY", "AHSCOL", "AMARITL", "AMJIND",
"AMJOCC", "ARACE", "AREORGN", "ASEX", "AUNMEM",
"AUNTYPE", "AWKSTAT", "CAPGAIN", "CAPLOSS", "DIVVAL",
"FILESTAT", "GRINREG", "GRINST", "HHDFMX",
"HHDREL", "MARSUPWT", "MIGMTR1", "MIGMTR3", "MIGMTR4",
"MIGSAME", "MIGSUN","NOEMP", "PARENT",
"PEFNTVTY","PEMNTVTY","PENATVTY","PRCITSHP",
"SEOTR", "VETQVA", "VETYN", "WKSWORK","YEAR", "INCOME")
test <- data.modificationOfCountryOfBirth(test)
ztest <- as.numeric(test[,"INCOME"])
test <- subset(test, select=-c(GRINST,HHDFMX,INCOME))
test <- subset(test, select=-c(ADTIND,ADTOCC))
prob <- predict(tr, test) # classe un jeu de données au moyen de l'arbre
pred <- as.matrix(max.col(prob))
err <- sum(as.numeric(tr$y) != as.numeric(ztest))/length(ztest)
ztest <- as.matrix(ztest)
mc <- matrix(0, nrow=2,ncol=2)
mc[1,1] <- sum(pred[which(ztest==1)] == ztest[which(ztest==1)])
mc[1,2] <- sum(pred[which(ztest==1)] != ztest[which(ztest==1)])
mc[2,1] <- sum(pred[which(ztest==2)] != ztest[which(ztest==2)])
mc[2,2] <- sum(pred[which(ztest==2)] == ztest[which(ztest==2)])
mc
(92299+2660)/99762
err <- sum(pred != as.numeric(ztest))/length(ztest)
ztest <- as.matrix(ztest)
mc <- matrix(0, nrow=2,ncol=2)
mc[1,1] <- sum(pred[which(ztest==1)] == ztest[which(ztest==1)])
mc[1,2] <- sum(pred[which(ztest==1)] != ztest[which(ztest==1)])
mc[2,1] <- sum(pred[which(ztest==2)] != ztest[which(ztest==2)])
mc[2,2] <- sum(pred[which(ztest==2)] == ztest[which(ztest==2)])
mc
summary(tr)
tr <- tree(as.factor(z) ~ ., data.frame(training[,1:36]), control = control_tree, split = "gini") # zapp has to be factor
tr$xlevels
prob <- predict(tr, test, type=class) # classe un jeu de données au moyen de l'arbre
prob <- predict(tr, test, type = "class") # classe un jeu de données au moyen de l'arbre
prob
ztest <- test[,"INCOME"]
as.factor(zest)x =
as.factor(zest)
as.factor(ztest)
test <- read.csv("Data/census_income_test.csv", header=F)
colnames(test) <- c("AAGE","ACLSWKR","ADTIND","ADTOCC", "AHGA",
"AHRSPAY", "AHSCOL", "AMARITL", "AMJIND",
"AMJOCC", "ARACE", "AREORGN", "ASEX", "AUNMEM",
"AUNTYPE", "AWKSTAT", "CAPGAIN", "CAPLOSS", "DIVVAL",
"FILESTAT", "GRINREG", "GRINST", "HHDFMX",
"HHDREL", "MARSUPWT", "MIGMTR1", "MIGMTR3", "MIGMTR4",
"MIGSAME", "MIGSUN","NOEMP", "PARENT",
"PEFNTVTY","PEMNTVTY","PENATVTY","PRCITSHP",
"SEOTR", "VETQVA", "VETYN", "WKSWORK","YEAR", "INCOME")
test <- data.modificationOfCountryOfBirth(test)
ztest <- test[,"INCOME"]
test <- subset(test, select=-c(GRINST,HHDFMX,INCOME))
test <- subset(test, select=-c(ADTIND,ADTOCC))
ztest
err <- sum(pred != ztest)/length(ztest)
err
err <- sum(prob != ztest)/length(ztest)
table(ztst,prob)
table(ztest,prob)
mc
summary(tr)
tr$where
tr$terms
tr$call
tr$y
tr$weights
tr <- tree(as.factor(z) ~ ., data.frame(training[,1:36]), control = control_tree, wts = TRUE) # zapp has to be factor
validation <- cv.tree(tr, FUN = prune.misclass)
tr$weights
tr$frame
fr <- tr$frame
View(fr)
library(randomForest)
set.seed(100)
model <- randomForest(formula = as.factor(z) ~ ., data = training[,1:36])
length(training[which(as.numeric(z)==1),1])
length(training[which(as.numeric(z)==1),1])/length(training)
length(training[which(as.numeric(z)==1),1])/length(training,1)
length(training[which(as.numeric(z)==1),1])/length(training[,1])
length(test[which(as.numeric(ztest)==1),1])/length(test[,1])
length(training[which(as.numeric(z)==1),1])/length(training[,1])*100
length(test[which(as.numeric(ztest)==1),1])/length(test[,1])*100
summary(tr)
table(training$AMJOCC,z)
table(training$FILESTAT,z)
table(training$AHGA,z)
view(fr)
View(fr)
plot(tr
)
library(glmnet)
library(caret)
#logistic <- glmnet(x=as.matrix(testFrame2), y=z, family="binomial", alpha=1)
#predict(logistic, as.matrix(testFrame2))
setwd("C:/Users/Bénédicte/Documents/Dataiku")
training <- read.csv("Data/census_income_learn.csv", header=F)
colnames(training) <- c("AAGE","ACLSWKR","ADTIND","ADTOCC", "AHGA",
"AHRSPAY", "AHSCOL", "AMARITL", "AMJIND",
"AMJOCC", "ARACE", "AREORGN", "ASEX", "AUNMEM",
"AUNTYPE", "AWKSTAT", "CAPGAIN", "CAPLOSS", "DIVVAL",
"FILESTAT", "GRINREG", "GRINST", "HHDFMX",
"HHDREL", "MARSUPWT", "MIGMTR1", "MIGMTR3", "MIGMTR4",
"MIGSAME", "MIGSUN","NOEMP", "PARENT",
"PEFNTVTY","PEMNTVTY","PENATVTY","PRCITSHP",
"SEOTR", "VETQVA", "VETYN", "WKSWORK","YEAR", "INCOME")
training <- training[sample(nrow(training)),]
z <- training[,"INCOME"]
training <- subset(training, select=-c(MARSUPWT))
training <- subset(training, select=-c(GRINST,HHDFMX,INCOME,ADTIND,ADTOCC))
training <- data.modificationOfCountryOfBirth(training)
training <- data.modificationBinaryVariable(training)
dmy <- dummyVars(" ~ .", data = training)
training <- data.frame(predict(dmy, newdata = training))
training <- training[, !colnames(training) %in% colnames(training)[which(grepl( "Not.in.universe", colnames(training)))]]
#Create 10 equally size folds
folds <- cut(seq(1,nrow(training)), breaks=10, labels=FALSE)
folds
err <- matrix(nrow=10, ncol=1)
#Perform 10-fold cross validation
for(i in 1:10){
print(i)
testIndexes <- which(folds==i,arr.ind = TRUE)
Xtest <- training[testIndexes,]
ztest <- z[testIndexes]
Xtrain <- training[-testIndexes,]
ztrain <- z[-testIndexes]
logistic2 <- cv.glmnet(x=as.matrix(Xtrain), y=ztrain, family="binomial", alpha=1, nfolds=5)
pred <- as.factor(predict(logistic2,
as.matrix(Xtest),
s = "lambda.min",
type = "class"))
err[i] <- sum(pred != ztest)/length(ztest)
print(err[i])
}
IC <- function(moy,var,n,alpha) {
student <- qt(1-alpha/2, df = n-1)
IC <- c(moy - student*sqrt(var/n), moy + student*sqrt(var/n))
IC
}
err_mean <- mean(err)
var <- apply(err,1, function(x) ((x-err_mean)^2))
var <- 1/(10-1)*apply(matrix(var),2,sum)
IC <- IC(err_mean,var,10,0.05)
IC
err_mean
tr
summary(tr
)
rownames(fr)
fr <- cbind(fr, rownames(fr))
boxplot(training$CAPGAIN~z, col=c("sienna3","cadetblue2"), xlab="Income", ylab="Capital Gains")
boxplot(training$CAPGAIN[which(training$CAPGAIN!=0)~z, col=c("sienna3","cadetblue2"), xlab="Income", ylab="Capital Gains")
# Weeks worked
boxplot(training$WKSWORK~z, col=c("sienna2","cadetblue3"), xlab="Income", ylab="Sex")
summary(training$WKSWORK[which(as.numeric(z)==1)])
summary(training$WKSWORK[which(as.numeric(z)==2)])
# sex
table(training$ASEX,z)
# working code
table(training$AMJOCC,z)
boxplot(training$CAPGAIN[which(training$CAPGAIN!=0)]~z, col=c("sienna3","cadetblue2"), xlab="Income", ylab="Capital Gains")
boxplot(training$CAPGAIN[which(training$CAPGAIN!=0)]~z[which(training$CAPGAIN!=0)], col=c("sienna3","cadetblue2"), xlab="Income", ylab="Capital Gains")
boxplot(training$CAPGAIN[which(training$CAPGAIN!=0 && training$CAPGAIN < 600000)]~z[which(training$CAPGAIN!=0 && training$CAPGAIN < 600000)], col=c("sienna3","cadetblue2"), xlab="Income", ylab="Capital Gains")
boxplot(training$CAPGAIN[which(training$CAPGAIN!=0 && training$CAPGAIN < 600000)]~z[which(training$CAPGAIN!=0 && training$CAPGAIN < 600000)], col=c("sienna3","cadetblue2"), xlab="Income", ylab="Capital Gains")
training$CAPGAIN[which(training$CAPGAIN!=0 && training$CAPGAIN < 600000)]
training$CAPGAIN[which(training$CAPGAIN!=0)]
training$CAPGAIN[which(training$CAPGAIN < 600000)]
training$CAPGAIN[which(training$CAPGAIN!=0 && training$CAPGAIN < 600000)]
training$CAPGAIN[which(training$CAPGAIN[which(training$CAPGAIN!=0]) < 60000)]
training$CAPGAIN[which(training$CAPGAIN[which(training$CAPGAIN!=0]) < 60000]
training$CAPGAIN[which(training$CAPGAIN[which(training$CAPGAIN!=0]) < 60000
training$CAPGAIN[which(training$CAPGAIN[which(training$CAPGAIN!=0)] < 60000]
training$CAPGAIN[which(training$CAPGAIN[which(training$CAPGAIN!=0)] < 60000)]
boxplot(training$CAPGAIN[which(training$CAPGAIN!=0]~z[which(training$CAPGAIN!=0)], col=c("sienna3","cadetblue2"), xlab="Income", ylab="Capital Gains")
# Weeks worked
boxplot(training$WKSWORK~z, col=c("sienna2","cadetblue3"), xlab="Income", ylab="Sex")
summary(training$WKSWORK[which(as.numeric(z)==1)])
summary(training$WKSWORK[which(as.numeric(z)==2)])
# sex
table(training$ASEX,z)
# working code
table(training$AMJOCC,z)
boxplot(training$CAPGAIN[which(training$CAPGAIN!=0]~z[which(training$CAPGAIN!=0)], col=c("sienna3","cadetblue2"), xlab="Income", ylab="Capital Gains")
# Weeks worked
boxplot(training$WKSWORK~z, col=c("sienna2","cadetblue3"), xlab="Income", ylab="Sex")
summary(training$WKSWORK[which(as.numeric(z)==1)])
summary(training$WKSWORK[which(as.numeric(z)==2)])
# sex
table(training$ASEX,z)
# working code
table(training$AMJOCC,z)
boxplot(training$CAPGAIN[which(training$CAPGAIN!=0)]~z[which(training$CAPGAIN!=0)], col=c("sienna3","cadetblue2"), xlab="Income", ylab="Capital Gains")
training$CAPGAIN[which(training$CAPGAIN>0 && training$CAPGAIN < 600000)]
training$CAPGAIN[which(training$CAPGAIN>0) && which(training$CAPGAIN < 600000)]
boxplot(training$CAPGAIN[which(training$CAPGAIN!=0) && which(training$CAPGAIN<60000)]~z[which(training$CAPGAIN!=0)&& which(training$CAPGAIN<60000)], col=c("sienna3","cadetblue2"), xlab="Income", ylab="Capital Gains")
boxplot(training$CAPGAIN[which(training$CAPGAIN!=0) || which(training$CAPGAIN<60000)]~z[which(training$CAPGAIN!=0) || which(training$CAPGAIN<60000)], col=c("sienna3","cadetblue2"), xlab="Income", ylab="Capital Gains")
boxplot(training$CAPGAIN[which(training$CAPGAIN!=0)]~z[which(training$CAPGAIN!=0)], col=c("sienna3","cadetblue2"), xlab="Income", ylab="Capital Gains")
training <- read.csv("Data/census_income_learn.csv", header=F)
colnames(training) <- c("AAGE","ACLSWKR","ADTIND","ADTOCC", "AHGA",
"AHRSPAY", "AHSCOL", "AMARITL", "AMJIND",
"AMJOCC", "ARACE", "AREORGN", "ASEX", "AUNMEM",
"AUNTYPE", "AWKSTAT", "CAPGAIN", "CAPLOSS", "DIVVAL",
"FILESTAT", "GRINREG", "GRINST", "HHDFMX",
"HHDREL", "MARSUPWT", "MIGMTR1", "MIGMTR3", "MIGMTR4",
"MIGSAME", "MIGSUN","NOEMP", "PARENT",
"PEFNTVTY","PEMNTVTY","PENATVTY","PRCITSHP",
"SEOTR", "VETQVA", "VETYN", "WKSWORK","YEAR", "INCOME")
z <- training[,"INCOME"]
table(training$FILESTAT)
table(training$FILESTAT,z)
apply(table(training$FILESTAT,z),2,function(X) {x/sum(x)*100})
apply(table(training$FILESTAT,z),2,function(x) {x/sum(x)*100})
apply(table(training$AMJOCC,z),2,function(x) {x/sum(x)*100})
apply(table(training$AHGA,z),2,function(x) {x/sum(x)*100})
apply(table(training$AMJOCC,z),2,function(x) {x/sum(x)*100})
boxplot(training$WKSWORK~z, col=c("sienna2","cadetblue3"), xlab="Income", ylab="Sex")
summary(training$WKSWORK[which(as.numeric(z)==1)])
summary(training$WKSWORK[which(as.numeric(z)==2)])
View(fr)
View(fr)
fr[which(var=="AMJOCC"),]
fr[which(var==AMJOCC),]
fr[which(fr[,1] == "AMJOCC"),]
fr[which(fr[,1] == "WKSWORK"),]
boxplot(training$AAGE~z, col=c("sienna2","cadetblue3"), xlab="Income", ylab="Age")
boxplot(training$CAPGAIN[which(training$CAPGAIN!=0)]~z[which(training$CAPGAIN!=0)], col=c("sienna3","cadetblue2"), xlab="Income", ylab="Capital Gains")
boxplot(training$WKSWORK~z, col=c("sienna2","cadetblue3"), xlab="Income", ylab="Sex")
summary(training$WKSWORK[which(as.numeric(z)==1)])
summary(training$WKSWORK[which(as.numeric(z)==2)])
plot(training$WKSWORK[which(as.numeric(z)==1)])
barplot(training$WKSWORK[which(as.numeric(z)==1)])
hist(training$WKSWORK[which(as.numeric(z)==1)])
hist(training$WKSWORK[which(as.numeric(z)==2)])
hist(training$WKSWORK[which(as.numeric(z)==2)],
col = grey(0.9), border = grey(0.2),
main = paste("Variable WKSWORK for $ +50000"),
xlab = "Number of weeks", las = 3,
labels = F)
boxplot(training$WKSWORK~z, col=c("sienna2","cadetblue3"), xlab="Income", ylab="Sex")
boxplot(training$WKSWORK~z, col=c("sienna2","cadetblue3"), xlab="Income", ylab="Number of weeks")
table(training$ASEX,z)
apply(table(training$AMJOCC,z),2,function(x) {x/sum(x)*100})
apply(table(training$FILESTAT,z),2,function(x) {x/sum(x)*100})
apply(table(training$AHGA,z),2,function(x) {x/sum(x)*100})
pred
z
mc(z,pred)
mc
confusionMatrix(pred,z)
length(z)
confusionMatrix(pred,ztest)
install.packages("e1071")
confusionMatrix(pred,ztest)
length(pred)
test <- read.csv("Data/census_income_test.csv", header=F)
colnames(test) <- c("AAGE","ACLSWKR","ADTIND","ADTOCC", "AHGA",
"AHRSPAY", "AHSCOL", "AMARITL", "AMJIND",
"AMJOCC", "ARACE", "AREORGN", "ASEX", "AUNMEM",
"AUNTYPE", "AWKSTAT", "CAPGAIN", "CAPLOSS", "DIVVAL",
"FILESTAT", "GRINREG", "GRINST", "HHDFMX",
"HHDREL", "MARSUPWT", "MIGMTR1", "MIGMTR3", "MIGMTR4",
"MIGSAME", "MIGSUN","NOEMP", "PARENT",
"PEFNTVTY","PEMNTVTY","PENATVTY","PRCITSHP",
"SEOTR", "VETQVA", "VETYN", "WKSWORK","YEAR", "INCOME")
test <- data.modificationOfCountryOfBirth(test)
ztest <- test[,"INCOME"]
test <- subset(test, select=-c(GRINST,HHDFMX,INCOME))
test <- subset(test, select=-c(ADTIND,ADTOCC))
pred <- predict(tr, test, type = "class") # classe un jeu de données au moyen de l'arbre
err <- sum(pred != ztest)/length(ztest)
table(ztest,pred) # confusion matrix
setwd("C:/Users/Bénédicte/Documents/Dataiku")
source("Scripts/data.R")
source("Scripts/separ1.R")
library(tree)
training <- read.csv("Data/census_income_learn.csv", header=F)
colnames(training) <- c("AAGE","ACLSWKR","ADTIND","ADTOCC", "AHGA",
"AHRSPAY", "AHSCOL", "AMARITL", "AMJIND",
"AMJOCC", "ARACE", "AREORGN", "ASEX", "AUNMEM",
"AUNTYPE", "AWKSTAT", "CAPGAIN", "CAPLOSS", "DIVVAL",
"FILESTAT", "GRINREG", "GRINST", "HHDFMX",
"HHDREL", "MARSUPWT", "MIGMTR1", "MIGMTR3", "MIGMTR4",
"MIGSAME", "MIGSUN","NOEMP", "PARENT",
"PEFNTVTY","PEMNTVTY","PENATVTY","PRCITSHP",
"SEOTR", "VETQVA", "VETYN", "WKSWORK","YEAR", "INCOME")
# The attribute "instance weight" should *not* be used in the
# classifiers, so it is set to "ignore" in this file
training <- subset(training, select=-c(MARSUPWT))
training <- data.modificationOfCountryOfBirth(training)
training <- subset(training, select=-c(GRINST,HHDFMX))
training <- subset(training, select=-c(ADTIND,ADTOCC))
control_tree <- tree.control(nobs=dim(training[,1:36])[1],mindev = 0.0001) # entire tree
tr <- tree(as.factor(z) ~ ., data.frame(training[,1:36]), control = control_tree, wts = TRUE) # zapp has to be factor
validation <- cv.tree(tr, FUN = prune.misclass)
# test file
test <- read.csv("Data/census_income_test.csv", header=F)
colnames(test) <- c("AAGE","ACLSWKR","ADTIND","ADTOCC", "AHGA",
"AHRSPAY", "AHSCOL", "AMARITL", "AMJIND",
"AMJOCC", "ARACE", "AREORGN", "ASEX", "AUNMEM",
"AUNTYPE", "AWKSTAT", "CAPGAIN", "CAPLOSS", "DIVVAL",
"FILESTAT", "GRINREG", "GRINST", "HHDFMX",
"HHDREL", "MARSUPWT", "MIGMTR1", "MIGMTR3", "MIGMTR4",
"MIGSAME", "MIGSUN","NOEMP", "PARENT",
"PEFNTVTY","PEMNTVTY","PENATVTY","PRCITSHP",
"SEOTR", "VETQVA", "VETYN", "WKSWORK","YEAR", "INCOME")
test <- data.modificationOfCountryOfBirth(test)
ztest <- test[,"INCOME"]
test <- subset(test, select=-c(GRINST,HHDFMX,INCOME))
test <- subset(test, select=-c(ADTIND,ADTOCC))
pred <- predict(tr, test, type = "class") # classe un jeu de données au moyen de l'arbre
err <- sum(pred != ztest)/length(ztest)
ztest <- as.matrix(ztest)
table(ztest,pred) # confusion matrix
setwd("C:/Users/Bénédicte/Documents/Dataiku")
set.seed(100)
source("Scripts/data.R")
library(tree)
training <- read.csv("Data/census_income_learn.csv", header=F)
colnames(training) <- c("AAGE","ACLSWKR","ADTIND","ADTOCC", "AHGA",
"AHRSPAY", "AHSCOL", "AMARITL", "AMJIND",
"AMJOCC", "ARACE", "AREORGN", "ASEX", "AUNMEM",
"AUNTYPE", "AWKSTAT", "CAPGAIN", "CAPLOSS", "DIVVAL",
"FILESTAT", "GRINREG", "GRINST", "HHDFMX",
"HHDREL", "MARSUPWT", "MIGMTR1", "MIGMTR3", "MIGMTR4",
"MIGSAME", "MIGSUN","NOEMP", "PARENT",
"PEFNTVTY","PEMNTVTY","PENATVTY","PRCITSHP",
"SEOTR", "VETQVA", "VETYN", "WKSWORK","YEAR", "INCOME")
# The attribute "instance weight" should *not* be used in the
# classifiers, so it is set to "ignore" in this file
training <- subset(training, select=-c(MARSUPWT))
training <- data.modificationOfCountryOfBirth(training)
training <- subset(training, select=-c(GRINST,HHDFMX))
training <- subset(training, select=-c(ADTIND,ADTOCC))
training <- training[,1:length(training)-1]
z <- training[,length(training)]
# Fit the model with all the training data
control_tree <- tree.control(nobs=dim(training)[1],mindev = 0.0001) # entire tree
tr <- tree(as.factor(z) ~ ., data.frame(training), control = control_tree, wts = TRUE) # zapp has to be factor
validation <- cv.tree(tr, FUN = prune.misclass)
# test file
test <- read.csv("Data/census_income_test.csv", header=F)
colnames(test) <- c("AAGE","ACLSWKR","ADTIND","ADTOCC", "AHGA",
"AHRSPAY", "AHSCOL", "AMARITL", "AMJIND",
"AMJOCC", "ARACE", "AREORGN", "ASEX", "AUNMEM",
"AUNTYPE", "AWKSTAT", "CAPGAIN", "CAPLOSS", "DIVVAL",
"FILESTAT", "GRINREG", "GRINST", "HHDFMX",
"HHDREL", "MARSUPWT", "MIGMTR1", "MIGMTR3", "MIGMTR4",
"MIGSAME", "MIGSUN","NOEMP", "PARENT",
"PEFNTVTY","PEMNTVTY","PENATVTY","PRCITSHP",
"SEOTR", "VETQVA", "VETYN", "WKSWORK","YEAR", "INCOME")
test <- data.modificationOfCountryOfBirth(test)
ztest <- test[,"INCOME"]
test <- subset(test, select=-c(GRINST,HHDFMX,INCOME))
test <- subset(test, select=-c(ADTIND,ADTOCC))
pred <- predict(tr, test, type = "class") # classe un jeu de données au moyen de l'arbre
err <- sum(pred != ztest)/length(ztest)
table(ztest,pred) # confusion matrix
# confusion matrix
confusionMatrix(ztest,pred)
pred
setwd("C:/Users/Bénédicte/Documents/Dataiku")
set.seed(100)
source("Scripts/data.R")
library(tree)
training <- read.csv("Data/census_income_learn.csv", header=F)
colnames(training) <- c("AAGE","ACLSWKR","ADTIND","ADTOCC", "AHGA",
"AHRSPAY", "AHSCOL", "AMARITL", "AMJIND",
"AMJOCC", "ARACE", "AREORGN", "ASEX", "AUNMEM",
"AUNTYPE", "AWKSTAT", "CAPGAIN", "CAPLOSS", "DIVVAL",
"FILESTAT", "GRINREG", "GRINST", "HHDFMX",
"HHDREL", "MARSUPWT", "MIGMTR1", "MIGMTR3", "MIGMTR4",
"MIGSAME", "MIGSUN","NOEMP", "PARENT",
"PEFNTVTY","PEMNTVTY","PENATVTY","PRCITSHP",
"SEOTR", "VETQVA", "VETYN", "WKSWORK","YEAR", "INCOME")
z <- training[,"INCOME"]
# The attribute "instance weight" should *not* be used in the
# classifiers, so it is set to "ignore" in this file
training <- subset(training, select=-c(MARSUPWT))
training <- data.modificationOfCountryOfBirth(training)
training <- subset(training, select=-c(GRINST,HHDFMX,INCOME))
training <- subset(training, select=-c(ADTIND,ADTOCC))
# Fit the model with all the training data
control_tree <- tree.control(nobs=dim(training)[1],mindev = 0.0001) # entire tree
tr <- tree(as.factor(z) ~ ., data.frame(training), control = control_tree, wts = TRUE) # zapp has to be factor
validation <- cv.tree(tr, FUN = prune.misclass)
# test file
test <- read.csv("Data/census_income_test.csv", header=F)
colnames(test) <- c("AAGE","ACLSWKR","ADTIND","ADTOCC", "AHGA",
"AHRSPAY", "AHSCOL", "AMARITL", "AMJIND",
"AMJOCC", "ARACE", "AREORGN", "ASEX", "AUNMEM",
"AUNTYPE", "AWKSTAT", "CAPGAIN", "CAPLOSS", "DIVVAL",
"FILESTAT", "GRINREG", "GRINST", "HHDFMX",
"HHDREL", "MARSUPWT", "MIGMTR1", "MIGMTR3", "MIGMTR4",
"MIGSAME", "MIGSUN","NOEMP", "PARENT",
"PEFNTVTY","PEMNTVTY","PENATVTY","PRCITSHP",
"SEOTR", "VETQVA", "VETYN", "WKSWORK","YEAR", "INCOME")
ztest <- test[,"INCOME"]
test <- data.modificationOfCountryOfBirth(test)
test <- subset(test, select=-c(GRINST,HHDFMX,INCOME))
test <- subset(test, select=-c(ADTIND,ADTOCC))
pred <- predict(tr, test, type = "class") # classe un jeu de données au moyen de l'arbre
err <- sum(pred != ztest)/length(ztest)
table(ztest,pred) # confusion matrix
# confusion matrix
confusionMatrix(ztest,pred)
summary(training$AAGE[which(as.numeric(z)==2)])
summary(training$CAPGAIN[which(as.numeric(z)==2)])
hist(training$WKSWORK[which(as.numeric(z)==2)],
col = grey(0.9), border = grey(0.2),
main = paste("Variable WKSWORK for $ +50000"),
xlab = "Number of weeks", las = 3,
labels = F)
